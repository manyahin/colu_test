// Generated by CoffeeScript 1.7.1
(function() {
  var ReactLineChart, circle, div, g, line, path, span, strong, style, svg, text, _ref;

  _ref = React.DOM, div = _ref.div, span = _ref.span, strong = _ref.strong, svg = _ref.svg, g = _ref.g, circle = _ref.circle, line = _ref.line, text = _ref.text, path = _ref.path, style = _ref.style;

  ReactLineChart = React.createClass({
    getDefaultProps: function() {
      return {
        width: 600,
        height: 400,
        margin: {
          top: 20,
          right: 20,
          bottom: 30,
          left: 75
        },
        axis: {
          x: {
            scale: 'linear'
          },
          y: {
            scale: 'linear'
          }
        }
      };
    },
    shouldComponentUpdate: function(nextProps) {
      return JSON.stringify(nextProps) !== JSON.stringify(this.props);
    },
    render: function() {
      var d, height, margin, pathCommands, r, tick, width, x, xs, y, ys, _i, _len, _ref1;
      if (!this.props.data || !this.props.data.length) {
        return null;
      }
      margin = this.props.margin;
      width = this.props.width - this.props.margin.left - this.props.margin.right;
      height = this.props.height - this.props.margin.top - this.props.margin.bottom;
      xs = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.props.data;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          d = _ref1[_i];
          _results.push(d.x);
        }
        return _results;
      }).call(this);
      Axes.register('x', this.props.series.x.scale, {
        range: [0, width],
        domain: [Math.min.apply(this, xs), Math.max.apply(this, xs)]
      });
      x = Axes.scale('x');
      ys = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.props.data;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          d = _ref1[_i];
          _results.push(d.y);
        }
        return _results;
      }).call(this);
      Axes.register('y', this.props.series.y.scale, {
        range: [height, 0],
        domain: [Math.min.apply(this, ys), Math.max.apply(this, ys)]
      });
      y = Axes.scale('y');
      pathCommands = "M" + (x(this.props.data[0].x)) + "," + (y(this.props.data[0].y));
      _ref1 = this.props.data.slice(1);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        r = _ref1[_i];
        pathCommands += "L" + (x(r.x)) + "," + (y(r.y));
      }
      return div({
        className: 'react-chart-line'
      }, style({
        scoped: true
      }, '.react-chart-line { font: 10px sans-serif; } .axis path, .axis line { fill: none; stroke: #000; shape-rendering: crispEdges; } .x.axis path { display: none; } .line { fill: transparent; stroke: rgb(141, 24, 33); stroke-width: 1.5px; }'), svg({
        style: {
          "height": "" + (height + margin.top + margin.bottom) + "px"
        },
        width: width + margin.left + margin.right,
        height: height + margin.top + margin.bottom
      }, g({
        transform: "translate(" + margin.left + ", " + margin.top + ")"
      }, g({
        className: "x axis",
        transform: "translate(0," + height + ")"
      }, (function() {
        var _j, _len1, _ref2, _results;
        _ref2 = Axes.getTicks('x');
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          tick = _ref2[_j];
          /* X Axis disabled because it's look worst 
            _results.push(g({
            className: "tick",
            key: tick.text,
            transform: "translate(" + tick.offset + ",0) rotate(-90)",
            style: {
              "opacity": "1"
            }
          }, line({
            y2: "6",
            x2: "0"
          }), text({
            y: "9",
            x: "0",
            dy: ".71em",
            style: {
              "textAnchor": "middle"
            }
          }, tick.text)));*/
        }
        return _results;
      })(), path({
        className: 'domain',
        d: "M-6,6 V0 H" + width + " V6"
      }), this.props.series.x.legend ? text({
        x: width - 10,
        y: "-16",
        style: {
          'textAnchor': 'start'
        }
      }, this.props.series.x.legend) : void 0), g({
        className: "y axis"
      }, (function() {
        var _j, _len1, _ref2, _results;
        _ref2 = Axes.getTicks('y');
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          tick = _ref2[_j];
          _results.push(g({
            className: "tick",
            key: tick.text,
            transform: "translate(0," + tick.offset + ")",
            style: {
              "opacity": "1"
            }
          }, line({
            x2: "-6",
            y2: "0"
          }), text({
            x: "-9",
            y: "0",
            dy: ".32em",
            style: {
              "textAnchor": "end"
            }
          }, tick.text)));
        }
        return _results;
      })(), path({
        className: 'domain',
        d: "M-6,0 H0 V" + height + " H-6"
      }), this.props.series.y.legend ? text({
        transform: 'rotate(-90)',
        y: '6',
        dy: '.71em',
        style: {
          'textAnchor': 'end'
        }
      }, this.props.series.y.legend) : void 0), path({
        className: "line",
        d: pathCommands
      }))));
    }
  });

  window. ReactLineChart = ReactLineChart;

}).call(this);
