// Generated by CoffeeScript 1.7.1
(function() {
  var AxesHelper;

  AxesHelper = function() {
    var format, getTicks, interval, registry, scales, self;
    self = this;
    registry = {};
    this.register = function(id, scaleType, opts) {
      var domain;
      domain = scaleType === 'time' ? [opts.domain[0].getTime ? opts.domain[0].getTime() : opts.domain[0], opts.domain[1].getTime ? opts.domain[1].getTime() : opts.domain[1]] : opts.domain;
      return registry[id] = {
        domain: domain,
        range: opts.range,
        scale: scales[scaleType](domain, opts.range),
        interval: opts.interval || interval(domain),
        tickFormat: opts.tickFormat || function(d) {
          return format[scaleType](id, d);
        }
      };
    };
    this.format = function(id) {
      return function(v) {
        return registry[id].tickFormat(v);
      };
    };
    this.getTicks = function(id) {
      return getTicks(id);
    };
    this.scale = function(id) {
      return registry[id].scale;
    };
    scales = {
      linear: function(domain, range) {
        return function(value) {
          var d, m;
          m = domain[1] - domain[0];
          d = range[1] - range[0];
          return ((value - domain[0]) / m) * d + range[0];
        };
      },
      time: function(domain, range) {
        var lin;
        lin = this.linear(domain, range);
        return function(value) {
          return lin((value.getTime ? value.getTime() : value));
        };
      }
    };
    interval = function(domain) {
      return (domain[1] - domain[0]) / 12;
    };
    format = {
      daysOfWeek: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      linear: function(id, v) {
        var commaize, nDecimals, parts;
        parts = v.toString().split('.');
        commaize = function(s) {
          if (s.length > 3) {
            return commaize(s.slice(0, -3)) + ',' + s.slice(-3);
          } else {
            return s;
          }
        };
        nDecimals = 5 - parts[0].length;
        return commaize(parts[0]) + (parts[1] && nDecimals > 1 ? "." + parts[1] : '').slice(0, nDecimals);
      },
      time: function(id, v) {
        var d, itv;
        d = new Date(v);
        itv = registry[id].interval;
        switch (false) {
          case !(itv < 6e4):
            return d.getMinutes() + 'm' + d.getSeconds() + 's';
          case !(itv < 36e5):
            return d.getHours() + 'h' + d.getMinutes() + 'm';
          case !(itv < 864e5):
            return this.daysOfWeek[d.getDay()] + ', ' + d.getHours() + 'h';
          case !(itv < 2592e6):
            return d.getDate() + '/' + (d.getMonth() + 1);
          case !(itv < 126144e6):
            return (d.getMonth() + 1) + '/' + d.getYear();
          default:
            return d.getFullYear();
        }
      }
    };
    getTicks = function(id) {
      var domain, itv, scale, t, tickFormat, ticks, _i, _ref, _ref1;
      tickFormat = registry[id].tickFormat;
      scale = registry[id].scale;
      domain = registry[id].domain;
      itv = registry[id].interval;
      ticks = [];
      for (t = _i = _ref = domain[0], _ref1 = domain[1]; itv > 0 ? _i <= _ref1 : _i >= _ref1; t = _i += itv) {
        ticks.push({
          offset: scale(t),
          text: tickFormat(t)
        });
      }
      return ticks;
    };
    return this;
  };

  window.Axes = AxesHelper();

}).call(this);